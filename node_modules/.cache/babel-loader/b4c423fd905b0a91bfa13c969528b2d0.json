{"ast":null,"code":"import countriesData from \"./country.data.json\";\nimport peopleData from \"./people.data.json\";\nconst searchCountryParameters = [\"name\", \"alpha2Code\", \"alpha3Code\", \"capital\", \"nativeName\", \"region\"];\nconst countriesAsObject = countriesData.reduce((acc, row) => ({ ...acc,\n  [row.alpha2Code]: row\n}), {});\n\nconst getCountries = async ({\n  search\n}) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      if (!search) return resolve({\n        searchResults: countriesData,\n        searchResultCount: countriesData.length,\n        totalResultCounter: countriesData.length\n      });\n      const nameAsLowerCase = search.toLowerCase();\n      const filteredData = countriesData.filter(row => {\n        return searchCountryParameters.some(parameter => row[parameter].toLowerCase().includes(nameAsLowerCase));\n      });\n      return resolve({\n        searchResults: filteredData,\n        searchResultCount: filteredData.length,\n        totalResultCounter: countriesData.length\n      });\n    }, 200);\n  });\n};\n\nconst getPeople = async ({\n  search\n}) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      if (!search) return resolve({\n        searchResults: peopleData,\n        searchResultCount: peopleData.length,\n        totalResultCounter: peopleData.length\n      });\n      const nameAsLowerCase = search.toLowerCase();\n      const filteredData = peopleData.filter(row => {\n        const country = countriesAsObject[row.country];\n        const foundInCountry = searchCountryParameters.some(parameter => {\n          return country && country[parameter].toLowerCase().includes(nameAsLowerCase);\n        });\n        const foundInFullName = `${row.first_name.toLowerCase()} ${row.last_name.toLowerCase()}`.includes(nameAsLowerCase);\n        return foundInCountry || foundInFullName;\n      });\n      return resolve({\n        searchResults: filteredData,\n        searchResultCount: filteredData.length,\n        totalResultCounter: peopleData.length\n      });\n    }, 200);\n  });\n};\n\nexport { getCountries, getPeople };","map":{"version":3,"sources":["C:/Users/User/Desktop/az/react-test-master/react-test-master/src/DataApi/index.ts"],"names":["countriesData","peopleData","searchCountryParameters","countriesAsObject","reduce","acc","row","alpha2Code","getCountries","search","Promise","resolve","setTimeout","searchResults","searchResultCount","length","totalResultCounter","nameAsLowerCase","toLowerCase","filteredData","filter","some","parameter","includes","getPeople","country","foundInCountry","foundInFullName","first_name","last_name"],"mappings":"AAMA,OAAOA,aAAP,MAA0B,qBAA1B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AAEA,MAAMC,uBAAuB,GAAG,CAC9B,MAD8B,EAE9B,YAF8B,EAG9B,YAH8B,EAI9B,SAJ8B,EAK9B,YAL8B,EAM9B,QAN8B,CAAhC;AASA,MAAMC,iBAAiB,GAAGH,aAAa,CAACI,MAAd,CAEvB,CAACC,GAAD,EAAMC,GAAN,MAAe,EAAE,GAAGD,GAAL;AAAU,GAACC,GAAG,CAACC,UAAL,GAAkBD;AAA5B,CAAf,CAFuB,EAE4B,EAF5B,CAA1B;;AAIA,MAAME,YAE2B,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAsB;AACxD,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9BC,IAAAA,UAAU,CAAC,MAAM;AACf,UAAI,CAACH,MAAL,EACE,OAAOE,OAAO,CAAC;AACbE,QAAAA,aAAa,EAAEb,aADF;AAEbc,QAAAA,iBAAiB,EAAEd,aAAa,CAACe,MAFpB;AAGbC,QAAAA,kBAAkB,EAAEhB,aAAa,CAACe;AAHrB,OAAD,CAAd;AAKF,YAAME,eAAe,GAAGR,MAAM,CAACS,WAAP,EAAxB;AAEA,YAAMC,YAAY,GAAGnB,aAAa,CAACoB,MAAd,CAAsBd,GAAD,IAAc;AACtD,eAAOJ,uBAAuB,CAACmB,IAAxB,CAA8BC,SAAD,IAClChB,GAAG,CAACgB,SAAD,CAAH,CAAeJ,WAAf,GAA6BK,QAA7B,CAAsCN,eAAtC,CADK,CAAP;AAGD,OAJoB,CAArB;AAKA,aAAON,OAAO,CAAC;AACbE,QAAAA,aAAa,EAAEM,YADF;AAEbL,QAAAA,iBAAiB,EAAEK,YAAY,CAACJ,MAFnB;AAGbC,QAAAA,kBAAkB,EAAEhB,aAAa,CAACe;AAHrB,OAAD,CAAd;AAKD,KAnBS,EAmBP,GAnBO,CAAV;AAoBD,GArBM,CAAP;AAsBD,CAzBD;;AA2BA,MAAMS,SAEyB,GAAG,OAAO;AAAEf,EAAAA;AAAF,CAAP,KAAsB;AACtD,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9BC,IAAAA,UAAU,CAAC,MAAM;AACf,UAAI,CAACH,MAAL,EACE,OAAOE,OAAO,CAAC;AACbE,QAAAA,aAAa,EAAEZ,UADF;AAEba,QAAAA,iBAAiB,EAAEb,UAAU,CAACc,MAFjB;AAGbC,QAAAA,kBAAkB,EAAEf,UAAU,CAACc;AAHlB,OAAD,CAAd;AAKF,YAAME,eAAe,GAAGR,MAAM,CAACS,WAAP,EAAxB;AACA,YAAMC,YAAY,GAAGlB,UAAU,CAACmB,MAAX,CAAmBd,GAAD,IAAS;AAC9C,cAAMmB,OAAY,GAAGtB,iBAAiB,CAACG,GAAG,CAACmB,OAAL,CAAtC;AACA,cAAMC,cAAc,GAAGxB,uBAAuB,CAACmB,IAAxB,CACpBC,SAAD,IAAoB;AAClB,iBACEG,OAAO,IACPA,OAAO,CAACH,SAAD,CAAP,CAAmBJ,WAAnB,GAAiCK,QAAjC,CAA0CN,eAA1C,CAFF;AAID,SANoB,CAAvB;AAQA,cAAMU,eAAe,GAClB,GAAErB,GAAG,CAACsB,UAAJ,CAAeV,WAAf,EAA6B,IAAGZ,GAAG,CAACuB,SAAJ,CAAcX,WAAd,EAA4B,EAA/D,CAAiEK,QAAjE,CACEN,eADF,CADF;AAIA,eAAOS,cAAc,IAAIC,eAAzB;AACD,OAfoB,CAArB;AAgBA,aAAOhB,OAAO,CAAC;AACbE,QAAAA,aAAa,EAAEM,YADF;AAEbL,QAAAA,iBAAiB,EAAEK,YAAY,CAACJ,MAFnB;AAGbC,QAAAA,kBAAkB,EAAEf,UAAU,CAACc;AAHlB,OAAD,CAAd;AAKD,KA7BS,EA6BP,GA7BO,CAAV;AA8BD,GA/BM,CAAP;AAgCD,CAnCD;;AAqCA,SAASP,YAAT,EAAuBgB,SAAvB","sourcesContent":["import {\n  Country,\n  GetCounriesRequest,\n  GetCounriesResponse,\n} from \"./country.interface\";\nimport { GetPeopleRequest, GetPeopleResponse } from \"./people.interface\";\nimport countriesData from \"./country.data.json\";\nimport peopleData from \"./people.data.json\";\n\nconst searchCountryParameters = [\n  \"name\",\n  \"alpha2Code\",\n  \"alpha3Code\",\n  \"capital\",\n  \"nativeName\",\n  \"region\",\n];\n\nconst countriesAsObject = countriesData.reduce<{\n  [country: string]: Country;\n}>((acc, row) => ({ ...acc, [row.alpha2Code]: row }), {});\n\nconst getCountries: (\n  req: GetCounriesRequest\n) => Promise<GetCounriesResponse> = async ({ search }) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      if (!search)\n        return resolve({\n          searchResults: countriesData,\n          searchResultCount: countriesData.length,\n          totalResultCounter: countriesData.length,\n        });\n      const nameAsLowerCase = search.toLowerCase();\n\n      const filteredData = countriesData.filter((row: any) => {\n        return searchCountryParameters.some((parameter) =>\n          row[parameter].toLowerCase().includes(nameAsLowerCase)\n        );\n      });\n      return resolve({\n        searchResults: filteredData,\n        searchResultCount: filteredData.length,\n        totalResultCounter: countriesData.length,\n      });\n    }, 200);\n  });\n};\n\nconst getPeople: (\n  req: GetPeopleRequest\n) => Promise<GetPeopleResponse> = async ({ search }) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      if (!search)\n        return resolve({\n          searchResults: peopleData,\n          searchResultCount: peopleData.length,\n          totalResultCounter: peopleData.length,\n        });\n      const nameAsLowerCase = search.toLowerCase();\n      const filteredData = peopleData.filter((row) => {\n        const country: any = countriesAsObject[row.country];\n        const foundInCountry = searchCountryParameters.some(\n          (parameter: any) => {\n            return (\n              country &&\n              country[parameter].toLowerCase().includes(nameAsLowerCase)\n            );\n          }\n        );\n        const foundInFullName =\n          `${row.first_name.toLowerCase()} ${row.last_name.toLowerCase()}`.includes(\n            nameAsLowerCase\n          );\n        return foundInCountry || foundInFullName;\n      });\n      return resolve({\n        searchResults: filteredData,\n        searchResultCount: filteredData.length,\n        totalResultCounter: peopleData.length,\n      });\n    }, 200);\n  });\n};\n\nexport { getCountries, getPeople };\n"]},"metadata":{},"sourceType":"module"}